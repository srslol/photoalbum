
        if img_width < width or img_height < height:
            new_width = width - img_width
            new_height = height - img_height
            #img = imutils.resize(img, width=new_width, height=new_height)
            img = imutils.resize(img, width=width, height=height)
            cv2.namedWindow(window_name, cv2.WINDOW_NORMAL) #WINDOW_NORMAL
            cv2.moveWindow(window_name, screen.x - 1, screen.y - 1)
            cv2.setWindowProperty(window_name, cv2.WND_PROP_FULLSCREEN,cv2.WINDOW_KEEPRATIO)
        else:

        

        #if img_width < width and img_height < height:
        #        #img = image_resize(img,height)
        #        new_width = int(width/2)
        #        new_height = int(height/2)
        #        img = imutils.resize(img, width=new_width, height=new_height)
        #cv2.imshow(img, cv2.IMREAD_UNCHANGED)

        #win_cnt_x, win_cnt_y = [width/2, height/2] 
        #image = cv2.resize(image,(win_x, win_y))


def image_resize(image, width = None, height = None, inter = cv2.INTER_AREA):
    # initialize the dimensions of the image to be resized and
    # grab the image size
    dim = None
    (h, w) = image.shape[:2]

    # if both the width and height are None, then return the
    # original image
    if width is None and height is None:
        return image

    # check to see if the width is None
    if width is None:
        # calculate the ratio of the height and construct the
        # dimensions
        r = height / float(h)
        dim = (int(w * r), height)

    # otherwise, the height is None
    else:
        # calculate the ratio of the width and construct the
        # dimensions
        r = width / float(w)
        dim = (width, int(h * r))

    # resize the image
    resized = cv2.resize(image, dim, interpolation = inter)

    # return the resized image
    return resized

    
        '''if img_width < width or img_height < height:
           
            new_width = width - img_width
            new_height = height - img_height
            #img = imutils.resize(img, width=new_width, height=new_height)
            img = imutils.resize(img, width=width, height=height)
            cv2.namedWindow(window_name, cv2.WINDOW_NORMAL) #WINDOW_NORMAL
            cv2.moveWindow(window_name, screen.x - 1, screen.y - 1)
            cv2.setWindowProperty(window_name, cv2.WND_PROP_FULLSCREEN,cv2.WINDOW_KEEPRATIO)
        else:'''


background_image = PhotoImage(file = "rabbit.png")
background_label = Label(root, image=background_image)
background_label.place(x=0, y=0, relwidth=1, relheight=1)

tfield = Text(root, width=25, height=12)
tfield.insert(INSERT, weather)
tfield.grid_columnconfigure(0, weight=1)
tfield.place(x=20,y=20)
root.mainloop()




'''
path = "images"
for file in os.listdir(path):
    if file.endswith(".png"):# or file.endswith(".jpg"):
        
        filename = path + '/' + os.path.join(file)
        print(filename)
        img = cv2.imread(filename)

        img_height, img_width, img_channels = img.shape
        print(f'ih{img_height}, w{img_width}, {img_channels}')
        print(f'sh{height}, sw{width}')

        img = imutils.resize(img, width=img_width, height=img_height)
        #img = imutils.resize(img, width=img_width, height=img_height)

        window_name = 'projector'
        cv2.namedWindow(window_name, cv2.WND_PROP_FULLSCREEN) #WINDOW_NORMAL
        cv2.moveWindow(window_name, screen.x - 1, screen.y - 1)
        
        cv2.namedWindow(window_name, cv2.WND_PROP_FULLSCREEN) #WINDOW_NORMAL
        cv2.moveWindow(window_name, screen.x - 1, screen.y - 1)
        cv2.setWindowProperty(window_name, cv2.WND_PROP_FULLSCREEN,cv2.WINDOW_KEEPRATIO)
        #cv2.WINDOW_KEEPRATIO   cv2.WINDOW_FULLSCREEN
        cv2.imshow(window_name, img)
        cv2.waitKey(1000)
        #time.sleep(3)